
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 17 20:50:36 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 17 20:50:36 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\003\005\000\002\004" +
    "\006\000\002\005\004\000\002\005\003\000\002\007\006" +
    "\000\002\010\003\000\002\010\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\006\003\000\002\006\004\000\002\012\003\000\002\012" +
    "\006\000\002\012\003\000\002\013\010\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\004\005\001\002\000\004\002\073\001" +
    "\002\000\004\005\007\001\002\000\004\013\072\001\002" +
    "\000\004\010\010\001\002\000\010\005\ufffd\007\ufffd\020" +
    "\ufffd\001\002\000\010\005\007\007\021\020\012\001\002" +
    "\000\010\007\024\021\027\025\025\001\002\000\006\015" +
    "\055\024\054\001\002\000\014\005\ufff1\006\ufff1\007\ufff1" +
    "\020\ufff1\026\ufff1\001\002\000\012\005\007\006\053\007" +
    "\051\020\012\001\002\000\014\005\ufff3\006\ufff3\007\ufff3" +
    "\020\ufff3\026\ufff3\001\002\000\010\005\ufffe\007\ufffe\020" +
    "\ufffe\001\002\000\012\005\ufff5\006\ufff5\007\ufff5\020\ufff5" +
    "\001\002\000\010\014\022\015\ufffb\024\ufffb\001\002\000" +
    "\010\007\024\021\027\025\025\001\002\000\014\015\uffec" +
    "\022\uffec\023\uffec\027\uffec\030\uffec\001\002\000\030\015" +
    "\uffe3\022\uffe3\023\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\030\015" +
    "\uffe2\022\uffe2\023\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002\000\030\015" +
    "\uffea\022\uffea\023\uffea\027\uffea\030\uffea\031\046\032\045" +
    "\033\044\034\047\035\042\036\043\001\002\000\010\007" +
    "\024\021\027\025\025\001\002\000\006\023\034\030\035" +
    "\001\002\000\014\015\uffee\022\uffee\023\uffee\027\032\030" +
    "\uffee\001\002\000\010\007\024\021\027\025\025\001\002" +
    "\000\014\015\uffed\022\uffed\023\uffed\027\uffed\030\uffed\001" +
    "\002\000\014\005\ufff2\006\ufff2\007\ufff2\020\ufff2\026\ufff2" +
    "\001\002\000\010\007\024\021\027\025\025\001\002\000" +
    "\014\015\uffef\022\uffef\023\uffef\027\032\030\uffef\001\002" +
    "\000\006\022\040\030\035\001\002\000\030\015\uffe1\022" +
    "\uffe1\023\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\001\002\000\010\007\024\021" +
    "\027\025\025\001\002\000\010\007\uffe5\021\uffe5\025\uffe5" +
    "\001\002\000\010\007\uffe4\021\uffe4\025\uffe4\001\002\000" +
    "\010\007\uffe6\021\uffe6\025\uffe6\001\002\000\010\007\uffe7" +
    "\021\uffe7\025\uffe7\001\002\000\010\007\uffe9\021\uffe9\025" +
    "\uffe9\001\002\000\010\007\uffe8\021\uffe8\025\uffe8\001\002" +
    "\000\014\015\uffeb\022\uffeb\023\uffeb\027\uffeb\030\uffeb\001" +
    "\002\000\004\014\022\001\002\000\012\005\ufff4\006\ufff4" +
    "\007\ufff4\020\ufff4\001\002\000\016\005\uffff\006\uffff\007" +
    "\uffff\013\uffff\020\uffff\026\uffff\001\002\000\004\007\064" +
    "\001\002\000\012\011\056\012\062\016\060\017\061\001" +
    "\002\000\004\023\ufff9\001\002\000\004\023\063\001\002" +
    "\000\004\023\ufff7\001\002\000\004\023\ufff6\001\002\000" +
    "\004\023\ufff8\001\002\000\010\005\ufffc\007\ufffc\020\ufffc" +
    "\001\002\000\006\015\ufffa\024\ufffa\001\002\000\006\015" +
    "\066\030\035\001\002\000\010\005\007\007\051\020\012" +
    "\001\002\000\004\026\070\001\002\000\010\005\007\007" +
    "\051\020\012\001\002\000\014\005\ufff0\006\ufff0\007\ufff0" +
    "\020\ufff0\026\ufff0\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\005\001\001\000\002\001\001\000\004\005\010" +
    "\001\001\000\002\001\001\000\016\004\013\006\014\007" +
    "\016\010\012\012\017\013\015\001\001\000\012\014\064" +
    "\015\030\016\022\017\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\013\012\051\013\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\027\015\030\016\022\017\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\040\001\001\000\012\014\036\015\030" +
    "\016\022\017\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\032\017\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\035\016\022\017\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\013\012\066\013\015\001\001\000\002\001\001\000\010" +
    "\004\013\012\070\013\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParser parser = new MPParser( scanner );
			Symbol syntax_tree = parser.parse();
			System.out.println(syntax_tree);
			System.out.println(syntax_tree.value);
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Term ::= OPEN_BRACKET Expression CLOSE_BRACKET 
            {
              Object RESULT = null;
		
    System.out.println("Smena 32 => Term!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Term ::= CONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 31 => Term CONST ");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Term ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 30 => Term ID");

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= GREATER_EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 29 => RelOp equal !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 28 => RelOp greater !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= UNEQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 27 => RelOp unequal !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 26 => RelOp equal !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= LESS_EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 25 => RelOp less_equal !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
    System.out.println("Smena 24 => RelOp less !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 23 => RelExpression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 22 => RelExpression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 21 => AndExpression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 20 => AndExpression and RelExpression!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 19 => Expression !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 18 => Expression or AndExpresion!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WhileLoop ::= WHILE Expression COLON Statement ELSE Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 17 => WhileLoop!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= Block 
            {
              Object RESULT = null;
		
    System.out.println("Smena 16 => Statement Block!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID ASSIGN Expression SEMI 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
    System.out.println("Smena 15 => Statement -> ID'"+id+"':= Expression; !");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= WhileLoop 
            {
              Object RESULT = null;
		
    System.out.println("Smena 14 => Statement -> WhileLoop!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 13 => StatementList -> StatementList Statement!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 12 => StatementList -> Statement!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOLEAN 
            {
              Object RESULT = null;
		
    System.out.println("Smena 11 => Type boolean!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 10 => Type real!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Object RESULT = null;
		
    System.out.println("Smena 9  => Type char!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 8  => Type integer!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 7  => NameList -> NameList, ID'"+id+"'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 6  => NameList -> ID '"+id+"'!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= NameList COLON Type SEMI 
            {
              Object RESULT = null;
		
    System.out.println("Smena 5  => Declaration!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Variables ::= EPSILON 
            {
              Object RESULT = null;
		
    System.out.println("Smena 4  => Variables Epsilon!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Smena 3  => Variables Declaration!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= BEGIN Variables StatementList END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 2  => Block!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Block DOT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 1 => Program!");

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

