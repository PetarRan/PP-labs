
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 17 20:50:38 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 17 20:50:38 CET 2021
  */
public class MPParserWithHelp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParserWithHelp() {super();}

  /** Constructor which sets the default scanner. */
  public MPParserWithHelp(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\005\004\000\002\005\003\000" +
    "\002\007\006\000\002\007\006\000\002\007\005\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\006\003\000\002\006\004\000\002\012\003\000" +
    "\002\012\006\000\002\012\006\000\002\012\005\000\002" +
    "\012\003\000\002\013\010\000\002\013\010\000\002\013" +
    "\007\000\002\013\006\000\002\013\005\000\002\013\004" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\004\005\001\002\000\004\002\116\001" +
    "\002\000\006\003\006\005\010\001\002\000\004\002\ufffe" +
    "\001\002\000\006\003\114\013\115\001\002\000\004\010" +
    "\011\001\002\000\012\003\ufff9\005\ufff9\007\ufff9\020\ufff9" +
    "\001\002\000\012\003\023\005\010\007\022\020\013\001" +
    "\002\000\012\003\102\007\025\021\031\025\026\001\002" +
    "\000\006\015\067\024\066\001\002\000\016\003\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\020\uffe8\026\uffe8\001\002\000\014" +
    "\003\063\005\010\006\065\007\062\020\013\001\002\000" +
    "\016\003\uffec\005\uffec\006\uffec\007\uffec\020\uffec\026\uffec" +
    "\001\002\000\012\003\ufffa\005\ufffa\007\ufffa\020\ufffa\001" +
    "\002\000\014\003\uffee\005\uffee\006\uffee\007\uffee\020\uffee" +
    "\001\002\000\010\014\024\015\ufff5\024\ufff5\001\002\000" +
    "\020\003\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb\020\ufffb" +
    "\026\ufffb\001\002\000\012\003\032\007\025\021\031\025" +
    "\026\001\002\000\032\003\uffd2\015\uffd2\022\uffd2\023\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\001\002\000\032\003\uffd1\015\uffd1\022\uffd1" +
    "\023\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\001\002\000\016\003\uffdc\015\uffdc" +
    "\022\uffdc\023\uffdc\027\uffdc\030\uffdc\001\002\000\032\003" +
    "\uffd9\015\uffd9\022\uffd9\023\uffd9\027\uffd9\030\uffd9\031\056" +
    "\032\055\033\054\034\057\035\052\036\053\001\002\000" +
    "\012\003\045\007\025\021\031\025\026\001\002\000\016" +
    "\003\uffe9\005\uffe9\006\uffe9\007\uffe9\020\uffe9\026\uffe9\001" +
    "\002\000\010\003\040\023\041\030\042\001\002\000\016" +
    "\003\uffdf\015\uffdf\022\uffdf\023\uffdf\027\035\030\uffdf\001" +
    "\002\000\012\003\037\007\025\021\031\025\026\001\002" +
    "\000\016\003\uffde\015\uffde\022\uffde\023\uffde\027\uffde\030" +
    "\uffde\001\002\000\016\003\uffdd\015\uffdd\022\uffdd\023\uffdd" +
    "\027\uffdd\030\uffdd\001\002\000\016\003\uffea\005\uffea\006" +
    "\uffea\007\uffea\020\uffea\026\uffea\001\002\000\016\003\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\020\uffeb\026\uffeb\001\002\000" +
    "\012\003\043\007\025\021\031\025\026\001\002\000\014" +
    "\003\uffe0\015\uffe0\022\uffe0\023\uffe0\030\uffe0\001\002\000" +
    "\016\003\uffe1\015\uffe1\022\uffe1\023\uffe1\027\035\030\uffe1" +
    "\001\002\000\032\003\uffce\015\uffce\022\uffce\023\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\001\002\000\010\003\047\022\050\030\042\001" +
    "\002\000\032\003\uffcf\015\uffcf\022\uffcf\023\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\001\002\000\032\003\uffd0\015\uffd0\022\uffd0\023\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\001\002\000\012\003\061\007\025\021\031" +
    "\025\026\001\002\000\012\003\uffd4\007\uffd4\021\uffd4\025" +
    "\uffd4\001\002\000\012\003\uffd3\007\uffd3\021\uffd3\025\uffd3" +
    "\001\002\000\012\003\uffd5\007\uffd5\021\uffd5\025\uffd5\001" +
    "\002\000\012\003\uffd6\007\uffd6\021\uffd6\025\uffd6\001\002" +
    "\000\012\003\uffd8\007\uffd8\021\uffd8\025\uffd8\001\002\000" +
    "\012\003\uffd7\007\uffd7\021\uffd7\025\uffd7\001\002\000\016" +
    "\003\uffdb\015\uffdb\022\uffdb\023\uffdb\027\uffdb\030\uffdb\001" +
    "\002\000\016\003\uffda\015\uffda\022\uffda\023\uffda\027\uffda" +
    "\030\uffda\001\002\000\004\014\024\001\002\000\020\003" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\013\ufffc\020\ufffc\026\ufffc" +
    "\001\002\000\014\003\uffed\005\uffed\006\uffed\007\uffed\020" +
    "\uffed\001\002\000\020\003\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\013\ufffd\020\ufffd\026\ufffd\001\002\000\006\003\101\007" +
    "\100\001\002\000\014\003\072\011\070\012\075\016\073" +
    "\017\074\001\002\000\006\003\ufff2\023\ufff2\001\002\000" +
    "\006\003\076\023\077\001\002\000\012\003\ufff6\005\ufff6" +
    "\007\ufff6\020\ufff6\001\002\000\006\003\ufff0\023\ufff0\001" +
    "\002\000\006\003\uffef\023\uffef\001\002\000\006\003\ufff1" +
    "\023\ufff1\001\002\000\012\003\ufff7\005\ufff7\007\ufff7\020" +
    "\ufff7\001\002\000\012\003\ufff8\005\ufff8\007\ufff8\020\ufff8" +
    "\001\002\000\006\015\ufff4\024\ufff4\001\002\000\006\015" +
    "\ufff3\024\ufff3\001\002\000\016\003\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\020\uffe2\026\uffe2\001\002\000\010\003\104\015" +
    "\105\030\042\001\002\000\016\003\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\020\uffe3\026\uffe3\001\002\000\012\003\106\005" +
    "\010\007\062\020\013\001\002\000\016\003\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\020\uffe4\026\uffe4\001\002\000\006\003" +
    "\110\026\111\001\002\000\016\003\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\020\uffe5\026\uffe5\001\002\000\012\003\112\005" +
    "\010\007\062\020\013\001\002\000\016\003\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\020\uffe6\026\uffe6\001\002\000\016\003" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\020\uffe7\026\uffe7\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\004\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\011\001\001\000\002\001\001\000\016\004" +
    "\014\006\015\007\017\010\013\012\020\013\016\001\001" +
    "\000\012\014\102\015\033\016\026\017\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\014\012\063" +
    "\013\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\032\015\033\016\026\017\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\050" +
    "\001\001\000\012\014\045\015\033\016\026\017\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\035\017\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\043\016\026\017\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\014\012\106\013\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\014\012\112\013\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParserWithHelp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParserWithHelp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParserWithHelp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public int errorNumber = 0;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new MPLexer( file );
            MPParserWithHelp parser = new MPParserWithHelp( scanner );
			parser.parse();

			if ( parser.errorNumber == 0)
				System.out.println( "Analiza je zavrsena. U kodu nema sintaksnih gresaka!" );
			else
				System.out.println( "Analiza je zavrsena. Broj sintaksnih gresaka: " + parser.errorNumber );
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public void syntax_error(Symbol current_token)
    {

    }

    public void report_error(String message, Object info)
    {
        System.out.println( message );
    }

    public int getLine()
    {
        return ( ( MPLexer ) getScanner() ).getLine();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParserWithHelp$actions {
  private final MPParserWithHelp parser;

  /** Constructor */
  CUP$MPParserWithHelp$actions(MPParserWithHelp parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParserWithHelp$do_action(
    int                        CUP$MPParserWithHelp$act_num,
    java_cup.runtime.lr_parser CUP$MPParserWithHelp$parser,
    java.util.Stack            CUP$MPParserWithHelp$stack,
    int                        CUP$MPParserWithHelp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParserWithHelp$result;

      /* select the action based on the action number */
      switch (CUP$MPParserWithHelp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Term ::= OPEN_BRACKET error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Expression !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Term ::= OPEN_BRACKET Expression error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje ')' !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Term ::= OPEN_BRACKET Expression CLOSE_BRACKET 
            {
              Object RESULT = null;
		
    System.out.println("Smena 32 => Term!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term ::= CONST 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 31 => Term CONST ");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 30 => Term ID");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelOp ::= GREATER_EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 29 => RelOp equal !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 28 => RelOp greater !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelOp ::= UNEQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 27 => RelOp unequal !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 26 => RelOp equal !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelOp ::= LESS_EQUAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 25 => RelOp less_equal !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelOp ::= LESS 
            {
              Object RESULT = null;
		
    System.out.println("Smena 24 => RelOp less !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 23 => RelExpression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelExpression ::= Term RelOp error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Term !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
    System.out.println("Smena 22 => RelExpression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 21 => AndExpression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AndExpression ::= AndExpression AND error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje RelExpression !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 20 => AndExpression and RelExpression!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 19 => Expression !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression OR error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje AndExpression !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
    System.out.println("Smena 18 => Expression or AndExpresion!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WhileLoop ::= WHILE error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Expression !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WhileLoop ::= WHILE Expression error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje ':' !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WhileLoop ::= WHILE Expression COLON error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Statement!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WhileLoop ::= WHILE Expression COLON Statement error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje else!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WhileLoop ::= WHILE Expression COLON Statement ELSE error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Statement!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WhileLoop ::= WHILE Expression COLON Statement ELSE Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 17 => WhileLoop!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(9/*WhileLoop*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= Block 
            {
              Object RESULT = null;
		
    System.out.println("Smena 16 => Statement Block!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).value;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Expression!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).value;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje ';'!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ID ASSIGN Expression SEMI 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).value;
		
    System.out.println("Smena 15 => Statement -> ID'"+id+"':= Expression; !");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= WhileLoop 
            {
              Object RESULT = null;
		
    System.out.println("Smena 14 => Statement -> WhileLoop!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 13 => StatementList -> StatementList Statement!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 12 => StatementList -> Statement!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOLEAN 
            {
              Object RESULT = null;
		
    System.out.println("Smena 11 => Type boolean!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= REAL 
            {
              Object RESULT = null;
		
    System.out.println("Smena 10 => Type real!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= CHAR 
            {
              Object RESULT = null;
		
    System.out.println("Smena 9  => Type char!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INTEGER 
            {
              Object RESULT = null;
		
    System.out.println("Smena 8  => Type integer!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(7/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList COMMA error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje ID !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 7  => NameList -> NameList, ID'"+id+"'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).value;
		
    System.out.println("Smena 6  => NameList -> ID '"+id+"'!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(6/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= NameList COLON error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Type!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= NameList COLON Type error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje ';'!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= NameList COLON Type SEMI 
            {
              Object RESULT = null;
		
    System.out.println("Smena 5  => Declaration!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(5/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Variables ::= EPSILON 
            {
              Object RESULT = null;
		
    System.out.println("Smena 4  => Variables Epsilon!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Smena 3  => Variables Declaration!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN Variables error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje StatementList !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN Variables StatementList error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje 'end'!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= BEGIN Variables StatementList END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 2  => Block!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje Block !");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM Block error 
            {
              Object RESULT = null;
		
    System.out.println("ERROR : Linija : " + parser.getLine() + ", nedostaje '.'!");
	parser.errorNumber++;

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Block DOT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 1 => Program!");

              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          return CUP$MPParserWithHelp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).value;
		RESULT = start_val;
              CUP$MPParserWithHelp$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParserWithHelp$stack.elementAt(CUP$MPParserWithHelp$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParserWithHelp$parser.done_parsing();
          return CUP$MPParserWithHelp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

